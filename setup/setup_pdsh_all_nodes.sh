#!/bin/bash
set -euo pipefail

# ============================================
# PDSH 全ノード一括設定スクリプト
# ============================================
# マスターノードから全計算ノードにPDSHを設定し、
# 相互通信を可能にする

echo "============================================"
echo " PDSH All Nodes Configuration"
echo " Master: $(hostname)"
echo " Date: $(date)"
echo "============================================"
echo ""

# カラー出力
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# ログ関数
log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }
log_step() { echo -e "${BLUE}[STEP]${NC} $1"; }

# クラスタ設定の読み込み
source /root/test/spectrumx-h200-benchmark/setup/cluster_config.sh

# SSH設定の確認
SSH_PORT=44222

# 1. マスターノードのSSH鍵生成
log_step "1/5 マスターノードのSSH鍵を確認しています..."
if [ ! -f ~/.ssh/id_rsa ]; then
    log_info "SSH鍵を生成しています..."
    ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
fi

# 2. 利用可能なノードの検出
log_step "2/5 利用可能なノードを検出しています..."
detect_available_nodes

if [ ${#AVAILABLE_NODES[@]} -eq 0 ]; then
    log_error "利用可能なノードが見つかりません"
    exit 1
fi

log_info "検出されたノード数: $NODE_COUNT"
log_info "ノードリスト: ${AVAILABLE_NODES[*]}"

# 3. PDSHパッケージのインストール確認スクリプト
cat > /tmp/install_pdsh_remote.sh << 'EOF'
#!/bin/bash
# リモートノードでPDSHをインストール

if ! command -v pdsh &> /dev/null; then
    echo "[$(hostname)] PDSHをインストールしています..."
    if [ -f /etc/debian_version ]; then
        sudo apt-get update -qq
        sudo apt-get install -y -qq pdsh pdsh-rcmd-ssh
    elif [ -f /etc/redhat-release ]; then
        sudo yum install -y pdsh pdsh-rcmd-ssh
    fi
else
    echo "[$(hostname)] PDSHは既にインストールされています"
fi

# PDSHのSSHモジュールを有効化
echo "export PDSH_RCMD_TYPE=ssh" >> ~/.bashrc
EOF

# 4. 各ノードにPDSHをインストール
log_step "3/5 全ノードにPDSHをインストールしています..."
for node in "${AVAILABLE_NODES[@]}"; do
    log_info "$node にPDSHをインストールしています..."
    scp -P $SSH_PORT -o StrictHostKeyChecking=no /tmp/install_pdsh_remote.sh "$node:/tmp/" 2>/dev/null
    ssh -p $SSH_PORT -o StrictHostKeyChecking=no "$node" "bash /tmp/install_pdsh_remote.sh" 2>&1
done

# 5. 共通のPDSH設定ファイル作成
log_step "4/5 PDSH設定ファイルを作成しています..."

# .pdshrcファイルの作成
cat > /tmp/.pdshrc << EOF
# PDSH Configuration for SpectrumX H200 Cluster
# Generated by setup_pdsh_all_nodes.sh on $(date)

export PDSH_RCMD_TYPE=ssh
export PDSH_SSH_ARGS="-p $SSH_PORT -o StrictHostKeyChecking=no -o ConnectTimeout=10"
export WCOLL=/tmp/hosts.txt

# Node lists
export ALL_NODES="${AVAILABLE_NODES[*]}"
export MASTER_NODE=$(hostname)
export COMPUTE_NODES="${AVAILABLE_NODES[@]:1}"  # マスターノード以外

# Helper functions
all_nodes() {
    echo "\$ALL_NODES" | tr ' ' ','
}

compute_nodes() {
    echo "\$COMPUTE_NODES" | tr ' ' ','
}

pdsh_all() {
    pdsh -w "\$(all_nodes)" "\$@"
}

pdsh_compute() {
    pdsh -w "\$(compute_nodes)" "\$@"
}

# PDSHオプション
export PDSH_OPTIONS="-f 64"
EOF

# hosts.txtファイルの作成
cat > /tmp/hosts.txt << EOF
# SpectrumX H200 Cluster Nodes
# Generated on $(date)
$(printf '%s\n' "${AVAILABLE_NODES[@]}")
EOF

# 環境変数設定スクリプト
cat > /tmp/setup_pdsh_env.sh << 'EOF'
#!/bin/bash
# PDSHの環境設定をユーザーのbashrcに追加

# .pdshrcを適切な場所にコピー
cp /tmp/.pdshrc ~/.pdshrc
cp /tmp/hosts.txt /tmp/hosts.txt

# bashrcに設定を追加（重複チェック付き）
if ! grep -q "source ~/.pdshrc" ~/.bashrc; then
    echo "" >> ~/.bashrc
    echo "# PDSH Configuration" >> ~/.bashrc
    echo "if [ -f ~/.pdshrc ]; then" >> ~/.bashrc
    echo "    source ~/.pdshrc" >> ~/.bashrc
    echo "fi" >> ~/.bashrc
fi

# 即座に反映
source ~/.pdshrc

echo "[$(hostname)] PDSH環境設定が完了しました"
EOF

# 6. 全ノードに設定ファイルを配布
log_step "5/5 全ノードに設定を配布しています..."

# マスターノードの設定
cp /tmp/.pdshrc ~/.pdshrc
cp /tmp/hosts.txt /tmp/hosts.txt
bash /tmp/setup_pdsh_env.sh

# 他のノードへの配布
for node in "${AVAILABLE_NODES[@]}"; do
    log_info "$node に設定を配布しています..."
    scp -P $SSH_PORT -o StrictHostKeyChecking=no /tmp/.pdshrc "$node:/tmp/" 2>/dev/null
    scp -P $SSH_PORT -o StrictHostKeyChecking=no /tmp/hosts.txt "$node:/tmp/" 2>/dev/null
    scp -P $SSH_PORT -o StrictHostKeyChecking=no /tmp/setup_pdsh_env.sh "$node:/tmp/" 2>/dev/null
    ssh -p $SSH_PORT -o StrictHostKeyChecking=no "$node" "bash /tmp/setup_pdsh_env.sh" 2>&1
done

# 7. 接続テスト
echo ""
log_info "=== PDSH接続テスト ==="

# マスターから全ノードへの接続テスト
log_info "マスターから全ノードへの接続テスト..."
source ~/.pdshrc
pdsh_all hostname 2>&1 | sort

# 相互接続テスト（オプション）
if [ "${1:-}" == "--test-all" ]; then
    echo ""
    log_info "全ノード間の相互接続テスト..."
    for src_node in "${AVAILABLE_NODES[@]}"; do
        echo ""
        log_info "From $src_node:"
        ssh -p $SSH_PORT "$src_node" "source ~/.pdshrc && pdsh -w '$(all_nodes)' hostname 2>&1" | sort
    done
fi

# 8. 設定サマリーの生成
cat > /tmp/pdsh_setup_summary.txt << EOF
PDSH Setup Summary
==================
Date: $(date)
Master Node: $(hostname)
SSH Port: $SSH_PORT
Total Nodes: $NODE_COUNT

Configured Nodes:
$(printf '  - %s\n' "${AVAILABLE_NODES[@]}")

Configuration Files:
  ~/.pdshrc - PDSH環境設定
  /tmp/hosts.txt - ノードリスト

Test Commands:
  pdsh_all hostname           # 全ノードでコマンド実行
  pdsh_compute nvidia-smi -L  # 計算ノードでGPU確認
  pdsh -w node1,node2 command # 特定ノードで実行

Environment Variables:
  PDSH_RCMD_TYPE=ssh
  PDSH_SSH_ARGS=-p $SSH_PORT -o StrictHostKeyChecking=no
  ALL_NODES=${AVAILABLE_NODES[*]}
EOF

# 完了メッセージ
echo ""
echo "============================================"
log_info "PDSH設定が完了しました！"
echo "============================================"
echo ""
echo "設定内容:"
echo "  - SSH ポート: $SSH_PORT"
echo "  - 設定ノード数: $NODE_COUNT"
echo "  - 設定ファイル: ~/.pdshrc, /tmp/hosts.txt"
echo ""
echo "テストコマンド:"
echo "  source ~/.pdshrc"
echo "  pdsh_all hostname"
echo ""
echo "詳細: /tmp/pdsh_setup_summary.txt"

# エラーチェック
if ! pdsh -w "${AVAILABLE_NODES[1]}" hostname &>/dev/null; then
    echo ""
    log_warn "一部のノードへの接続に問題がある可能性があります"
    log_warn "SSH鍵の配布を確認してください："
    log_warn "  ssh-copy-id -p $SSH_PORT user@node"
fi